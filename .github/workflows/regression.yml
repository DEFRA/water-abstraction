name: Regression

on:
  pull_request:
    types: [ opened, synchronize, reopened ]


jobs:
  build:
    runs-on: macos-latest
    env:
      COOKIE_SECRET: somethingverysecrethere
      GOOGLE_ANALYTICS_PROPERTY_ID: ga-test
      PGUSER: water
      PGHOST: localhost
      PGPASSWORD: water
      PGPORT: 5432
      PGDATABASE: water
      ENVIRONMENT: dev
      DATABASE_URL: postgres://water:water@localhost:5432/water
      JWT_SECRET: secret
      JWT_TOKEN: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIzNH0.MOREC6-Kszb9bDFw0O1UKywpnkcP-c5cPjASMpjk8Po
      NOTIFY_KEY: somerealnotifykey-00000000-0000-0000-0000-000000000000-00000000-0000-0000-0000-000000000000
      TEST_NOTIFY_KEY: ${{ secrets.TEST_NOTIFY_KEY }}
      WHITELIST_NOTIFY_KEY: ${{ secrets.WHITELIST_NOTIFY_KEY }}
      LIVE_NOTIFY_KEY: somerealnotifykey-00000000-0000-0000-0000-000000000000-00000000-0000-0000-0000-000000000000
      TEST_MODE: 1
      NODE_ENV: test
      CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
      WATER_URI: http://127.0.0.1:8001/water/1.0
      WATER_URI_INTERNAL: http://127.0.0.1:8001/water/1.0
      PERMIT_URI: http://127.0.0.1:8004/API/1.0/
      ADMIN_URI: http://127.0.0.1:8005/API/1.0/
      CRM_URI: http://127.0.0.1:8002/crm/1.0
      RETURNS_URI: http://127.0.0.1:8006/returns/1.0

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:13-alpine
        # Provide the password for postgres
        env:
          POSTGRES_USER: water
          POSTGRES_HOST: localhost
          POSTGRES_PASSWORD: water
          POSTGRES_PORT: 5432
          POSTGRES_DB: water
        # Maps tcp port 5432 on service container to the host
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started. You must have this so the runner knows to wait till
        # postgres is up and running before proceeding
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Install Google Chrome # Using shell script to install Google Chrome
        run: |
          brew cask install google-chrome
          brew cask install chromedriver

      # Downloads a copy of the code in your repository before running CI tests
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create database
        run: |
          PGPASSWORD=water psql -U water -tc "SELECT 'CREATE DATABASE water' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'water')"
          PGPASSWORD=water psql -U water -tc "CREATE SCHEMA IF NOT EXISTS water AUTHORIZATION water;"

      # Our projects use .nvmrc files to specify the node version to use. We can read and then output it as the result
      # this step. Subsequent steps can then access the value
      - name: Read Node version
        run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
        # Give the step an ID to make it easier to refer to
        id: nvm

      # Gets the version to use by referring to the previous step
      - name: Install Node
        uses: actions/setup-node@v1
        with:
          node-version: "${{ steps.nvm.outputs.NVMRC }}"


      - name: Install water service
        uses: actions/checkout@v2
        with:
          repository: defra/water-abstraction-service
          path: './water-abstraction-service'

      - name: Install water service dependencies
        run: |
          cd ./water-abstraction-service
          npm ci

      - name: Run database migrations
        run: |
          cd ./water-abstraction-service
          npm run migrate

      - name: Install CRM
        uses: actions/checkout@v2
        with:
          repository: defra/water-abstraction-tactical-crm
          path: './water-abstraction-tactical-crm'

      - name: Install CRM dependencies
        run: cd ./water-abstraction-tactical-crm && npm ci && npm run migrate && cd ../

      # Performs a clean installation of all dependencies in the `package.json` file
      # For more information, see https://docs.npmjs.com/cli/ci.html
      - name: Install UI dependencies
        run: npm ci


      - name: Install IDM
        uses: actions/checkout@v2
        with:
          repository: defra/water-abstraction-tactical-idm
          path: './water-abstraction-tactical-idm'

      - name: Install IDM dependencies
        run: cd ./water-abstraction-tactical-idm && npm ci && npm run migrate && cd ../

      - name: Install returns service
        uses: actions/checkout@v2
        with:
          repository: defra/water-abstraction-returns
          path: './water-abstraction-returns'

      - name: Install returns service dependencies
        run: cd ./water-abstraction-returns && npm ci && npm run migrate && cd ../

      - name: Install permit repo
        uses: actions/checkout@v2
        with:
          repository: defra/water-abstraction-permit-repository
          path: './water-abstraction-permit-repository'

      - name: Install permit repo dependencies
        run: cd ./water-abstraction-permit-repository && npm ci && npm run migrate && cd ../

      # Speeds up workflows by reading the node modules from cache. Obviously you need to run it at least once, and the
      # cache will be updated should the package-lock.json file change
      - name: Cache Node modules
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-

      - name: Provision SQL data
        run: |
          PGPASSWORD=water psql -U water -d water -a -f ./test/regression/shared-helpers/provision.sql

      - name: Run regression tests
        run: |
          npm run test:regression